const { app, BrowserWindow, ipcMain } = require('electron');
const { spawn } = require('child_process');

let win;

let pythonProcess;

function createWindow () {
  win = new BrowserWindow({
    width: 400,
    height: 600,
    resizable: false,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    }
  });

  win.loadFile('index.html');
  //win.webContents.openDevTools();
}

app.whenReady().then(() => {
  createWindow();

  ipcMain.on('run-python-script-Wall', () => {
   pythonProcess = spawn('python', ['C:/Users/Tudor/Desktop/pythonPrograms/csgoCheat/functions/wall.py']);
;
    
    pythonProcess.stdout.on('data', (data) => {
      console.log(`stdout: ${data}`);
    });

    pythonProcess.stderr.on('data', (data) => {
      console.error(`stderr: ${data}`);
    });

    pythonProcess.on('close', (code) => {
      console.log(`Python script exited with code ${code}`);
    });
  });

ipcMain.on('run-python-script-Bunny', () => {
   pythonProcess = spawn('python', ['C:/Users/Tudor/Desktop/pythonPrograms/csgoCheat/functions/bunny.py']);
;
    
    pythonProcess.stdout.on('data', (data) => {
      console.log(`stdout: ${data}`);
    });

    pythonProcess.stderr.on('data', (data) => {
      console.error(`stderr: ${data}`);
    });

    pythonProcess.on('close', (code) => {
      console.log(`Python script exited with code ${code}`);
    });
  });

ipcMain.on('run-python-script-Antiflash', () => {
   pythonProcess = spawn('python', ['C:/Users/Tudor/Desktop/pythonPrograms/csgoCheat/functions/antiflash.py']);
;
    
    pythonProcess.stdout.on('data', (data) => {
      console.log(`stdout: ${data}`);
    });

    pythonProcess.stderr.on('data', (data) => {
      console.error(`stderr: ${data}`);
    });

    pythonProcess.on('close', (code) => {
      console.log(`Python script exited with code ${code}`);
    });
  });


  ipcMain.on('kill-python-script-Wall', ()=>{
    if (pythonProcess!==null) {
      pythonProcess.kill('SIGTERM');
      pythonProcess=null;
    }
  });

});
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});






const { ipcRenderer } = require('electron');

const checkboxAttach = document.querySelector('#checkboxAttach');
const checkboxAim = document.querySelector('#checkboxAim');
const checkboxWall = document.querySelector('#checkboxWall');
const checkboxRadar = document.querySelector('#checkboxRadar');
const checkboxAntiflash= document.querySelector('#checkboxAntiflash');
const checkboxTrigger= document.querySelector('#checkboxTrigger');


checkboxAttach.addEventListener('change', (event) => {
  if (event.target.checked) {
    ipcRenderer.send('run-python-script');
  }
  checkbox.blur(); // remove focus from the checkbox
  setTimeout(function() {
    checkbox.focus(); // add focus back to the checkbox
  }, 0);
});
checkboxAim.addEventListener('change', (event) => {
  if (event.target.checked) {
    ipcRenderer.send('run-python-script');
  }
});
checkboxWall.addEventListener('change', (event) => {
  if (event.target.checked) {
    ipcRenderer.send('run-python-script-Wall');
  }
  else {
    ipcRenderer.send('kill-python-script-Wall');
  }
});
checkboxBunny.addEventListener('change', (event) => {
  if (event.target.checked) {
    ipcRenderer.send('run-python-script-Bunny');
  }
});
checkboxAntiflash.addEventListener('change', (event) => {
  if (event.target.checked) {
    ipcRenderer.send('run-python-script-Antiflash');
  }
});
checkboxTrigger.addEventListener('change', (event) => {
  if (event.target.checked) {
    ipcRenderer.send('run-python-script');
  }
});














<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Electron Textbox Example</title>
    <link rel="stylesheet" href="styles.css">

  </head>
  <body style="background-image: url('https://i.ibb.co/qkHL5fX/poza3.jpg');">
    <div for="CheatDiv">
      <label for="CheatName">Cheat</label>
    </div>
    
    <div>
      <label for="slider">Aimbot:</label>
      <input type="checkbox" id="checkboxAim">
      <input type="range" id="slider" name="slider" min="0" max="100" value="50">
    </div>
    <div>
      <label for="wallhack">Wallhack:</label>
      <input type="checkbox" id="checkboxWall" >
    </div>
    <div>
      <label for="bunny">Bunny:</label>
      <input type="checkbox" id="checkboxBunny">
    </div>
    <div>
      <label for="antiflash">Antiflash:</label>
      <input type="checkbox" id="checkboxAntiflash">
    </div>
    <div>
      <label for="trigger">Trigger:</label>
      <input type="checkbox" id="checkboxTrigger">
    </div>
    <div class="process">
      <label for="processAttach">ATTACH TO PROCESS</label>
      <input class="checkboxProcess" type="checkbox" id="checkboxAttach">
    </div> 
         <script src="./renderer.js"></script>
  </body>
</html>
















/* styles.css */
label[for=CheatName] {
  font-size:50px;
  font-family: Arial, Helvetica, sans-serif;
  text-align: center;
  color:greenyellow;
}
label[for=processAttach] {
  font-weight: bold;
}

div{
  margin-top: 10px;
}

div[for=CheatDiv] {
  text-align: center;
  margin-bottom: 50px;
  padding-left:0px;
}

 body {
    font-family: Arial, Helvetica, sans-serif;
    font-size: 16px;
    margin: 20px;
    background-position: center;
    background-size:100%;
  }
  label {
    display: inline-block;
    width: 100px;
    margin-right: 10px;
    color:white;
  }
  input[type="text"] {
    width: 150px;
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 3px;
    margin-right: 10px;
  }
  
 .process .checkboxProcess {
  transform: scale(3); /* Change the value to adjust the size */
}
input[type="checkbox"] {
  margin-right: 10px;
  vertical-align: middle;
  transition: background-color 0.3s ease;
   transform: scale(1.5);
}

/* change the background color of the checkbox when it's checked */
input[type="checkbox"]:checked {
  background-color: green;
}
label {
  font-size: 24px;
}
.process{
  margin-top: 20px;
  text-align: center;
  margin-bottom: 50px;
}

.checkboxProcess {
  transform: scale(3);
  vertical-align: middle;
    position: absolute;
    left: 189px;
    top:78%;
    margin-bottom: 30px;
  
}
#processAttach {
  display: inline-block;
  margin-left: 10px;
  vertical-align: middle;
}
/* styles.css */
#slider {
  -webkit-appearance: none;
  width: 50%;
  height: 10px;
  border-radius: 5px;
  background-color: #ddd;
  outline: none;
  padding: 0;
  margin: 0;
}

#slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: #4CAF50;
  cursor: pointer;
  transition: background-color 0.2s;
}

#slider::-moz-range-thumb {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: #4CAF50;
  cursor: pointer;
  transition: background-color 0.2s;
}

#slider::-moz-range-track {
  background-color: #ddd;
  height: 10px;
}

#slider::-webkit-slider-runnable-track {
  background-color: #ddd;
  height: 10px;
  position: relative;
}

#slider::-webkit-slider-runnable-track::before {
  content: '';
  width: 100%;
  height: 10px;
  background-color: #4CAF50;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: width 0.2s;
}

#slider::-webkit-slider-thumb:hover,
#slider::-moz-range-thumb:hover {
  background-color: #6bd267;
}

#slider:focus::-webkit-slider-runnable-track::before {
  width: calc(100% + 20px);
}
input[type="range"]::-webkit-slider-thumb {
  
  -webkit-transition: all 0.2s ease;
  transition: all 0.2s ease;
    -webkit-appearance: none;
  height: 10px;
  width: 20px;
  background-color: green;
  border-radius: 30%;
  cursor: pointer;
  margin-top: -5px;
}

/* change the appearance of the thumb when it's being dragged */
input[type="range"]:active::-webkit-slider-thumb {
  background-color: red;
  transform: scale(1.2);
}

/* increase the size of the thumb when hovering over the slider */
input[type="range"]:hover::-webkit-slider-thumb {
  transform: scale(1.2);
}


